# -*- coding: utf-8 -*-
"""FakhriMN_ProjectDicoding.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1v7dm03tGJu5c75aSv3w6eFJ9_HKDnrhC

#Project Machine Learning

Name: Fakhri Maulana Nurjaman

Email: fakhrimaulana046@gmail.com

Phone: 08998428065

Kota: Tasikmalaya
"""

import tensorflow as tf
from tensorflow.keras.optimizers import RMSprop
from tensorflow.keras.preprocessing.image import ImageDataGenerator

!wget --no-check-certificate \
  https://github.com/dicodingacademy/assets/releases/download/release/rockpaperscissors.zip

import zipfile,os

local_zip = '/content/rockpaperscissors.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/content/')
zip_ref.close()

!sudo apt install tree

!tree -d /content/

gunting = os.path.join('/content/rockpaperscissors/scissors')
batu = os.path.join('/content/rockpaperscissors/rock')
kertas = os.path.join('/content/rockpaperscissors/paper')

print('jumlah gambar gunting: ', len(os.listdir(gunting)))
print('jumlah gambar batu: ', len(os.listdir(batu)))
print('jumlah gambar kertas: ', len(os.listdir(kertas)))

basis_dir = '/content/rockpaperscissors/rps-cv-images'
train_datagen = ImageDataGenerator(rescale=1./255,
                                   rotation_range=40,
                                   width_shift_range=0.2,
                                   height_shift_range=0.2,
                                   shear_range=0.2,
                                   zoom_range=0.2,
                                   horizontal_flip=True,
                                   fill_mode='nearest',
                                   validation_split=0.4)

train_set = train_datagen.flow_from_directory(basis_dir,
                                              target_size=(150,150),
                                              class_mode='categorical',
                                              shuffle=True,
                                              subset='training')

val_set = train_datagen.flow_from_directory(basis_dir,
                                            target_size=(150,150),
                                            class_mode='categorical',
                                            shuffle=True,
                                            subset='validation')

model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(150, 150, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dense(3, activation='softmax')
])

model.summary()

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy')>0.96):
      print("\nAkurasi telah mencapai >96%!")
      self.model.stop_training = True
callbacks = myCallback()

model.compile(loss='categorical_crossentropy',
              optimizer=tf.keras.optimizers.Adam(),
              metrics=['accuracy'])

history = model.fit(
      train_set,
      steps_per_epoch=25,
      epochs=20,
      validation_data=val_set,
      validation_steps=5,
      callbacks=[callbacks],
      batch_size=128,
      verbose=2)

# Save the entire model as a SavedModel.
!mkdir -p saved_model
model.save('saved_model/Project-Akhir')

!ls saved_model

# cek
!ls saved_model/Project-Akhir

import matplotlib.pyplot as plt
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Akurasi Model')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Loss Model')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
from google.colab import files
from keras.preprocessing import image
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import matplotlib.image as mpimg
# %matplotlib inline

uploaded = files.upload()
 
for fn in uploaded.keys():
 
  # predicting images
  path = fn
  img = image.load_img(path, target_size=(150,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x1 = np.expand_dims(x, axis=0)
 
  images = np.vstack([x1])
  classes = model.predict(images, batch_size=10)
  
  print(fn)
  if classes[0][0]==1:
    print('paper')
  elif classes[0][1]==1:
    print('rock')
  elif classes[0][2]==1:
    print('scissors')
  else:
    print('unknown')